#ifndef _Z80DEC_H_INCLUDED
#define _Z80DEC_H_INCLUDED

#include <stdbool.h>

/*

data            EQU 000D0H
decompress      EQU 00018H
smc_code_addr   EQU 00009H
smc_code_size   EQU 0000CH
smc_data_size   EQU 00014H
smc_jump_addr   EQU 00000H
smc_load_addr   EQU 00011H
smc_work_addr   EQU 00004H

*/

#define DATA            0x00D0
#define DECOMPRESS      0x0018
#define WORKSIZE        0x0020
#define SMC_CODE_ADDR   0x0009
#define SMC_DATA_SIZE   0x0014
#define SMC_JUMP_ADDR   0x0000
#define SMC_LOAD_ADDR   0x0011
#define SMC_WORK_ADDR   0x0004

#define EXE_DEC_SIZE    (DATA-DECOMPRESS)


unsigned char z80exedec[208] = {
        0x21,0x00,0x00,0xe5,0x11,0x00,0x00,0x7a,
        0xd5,0x21,0x00,0x00,0x01,0xb8,0x00,0xed,
        0xb0,0x11,0x00,0x00,0x01,0x00,0x00,0xc9,
        0xd5,0xed,0xb0,0xeb,0x47,0x0e,0x20,0x2b,
        0x7e,0xe6,0x03,0x5f,0x87,0x83,0xc6,0x05,
        0x0d,0x02,0x3e,0x0c,0xa6,0x0f,0x3c,0x0d,
        0x02,0xed,0x67,0x3e,0x03,0xa1,0x20,0xe8,
        0xa9,0x20,0xe4,0xc5,0xdd,0xe1,0x2b,0x46,
        0x2b,0x4e,0xe3,0x09,0xe3,0x2b,0x46,0x2b,
        0x4e,0xd1,0x2b,0x7e,0x2b,0x1b,0x18,0x03,
        0xed,0xa8,0xe0,0x87,0x20,0x03,0x7e,0x8f,
        0x2b,0x30,0xf5,0xd9,0xdd,0xe5,0xe1,0x06,
        0x07,0x87,0x20,0x05,0xd9,0x7e,0x2b,0xd9,
        0x8f,0x30,0x03,0x2c,0x10,0xf3,0x87,0x20,
        0x05,0xd9,0x7e,0x2b,0xd9,0x8f,0xcb,0x15,
        0xcb,0x25,0x4e,0x2c,0x46,0xed,0x62,0x08,
        0x78,0x11,0x01,0x00,0xd6,0x08,0x38,0x11,
        0x1e,0x21,0x47,0xd9,0x7e,0x2b,0xd9,0x6f,
        0x28,0x15,0xcb,0x40,0x20,0x02,0x16,0x08,
        0x14,0x08,0x87,0x20,0x05,0xd9,0x7e,0x2b,
        0xd9,0x8f,0xed,0x6a,0x10,0xf4,0xfe,0x08,
        0x19,0xe5,0x58,0x41,0x2e,0x55,0xcb,0x25,
        0x87,0x20,0x05,0xd9,0x7e,0x2b,0xd9,0x8f,
        0xcb,0x13,0x10,0xf2,0x08,0x3e,0xab,0xad,
        0x83,0xd9,0xe3,0x19,0xed,0xa8,0x3d,0x20,
        0xfb,0xed,0xa8,0xe1,0xe0,0x08,0x18,0x83
};


static inline void set_code_addr(uint16_t addr)
{
    z80exedec[SMC_CODE_ADDR+1] = addr;
    z80exedec[SMC_CODE_ADDR+2] = addr >> 8;
}

static inline void set_jump_addr(uint16_t addr)
{
    z80exedec[SMC_JUMP_ADDR+1] = addr;
    z80exedec[SMC_JUMP_ADDR+2] = addr >> 8;
}

static inline void set_load_addr(uint16_t addr)
{
    z80exedec[SMC_LOAD_ADDR+1] = addr;
    z80exedec[SMC_LOAD_ADDR+2] = addr >> 8;
}

static inline void set_work_addr(uint16_t addr)
{
    z80exedec[SMC_WORK_ADDR+1] = addr;
    z80exedec[SMC_WORK_ADDR+2] = addr >> 8;
}

static inline void set_data_size(uint16_t addr)
{
    z80exedec[SMC_DATA_SIZE+1] = addr;
    z80exedec[SMC_DATA_SIZE+2] = addr >> 8;
}

#endif
